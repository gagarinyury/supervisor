require('dotenv').config();
const fs = require('fs');
const path = require('path');
const https = require('https');
const { exec } = require('child_process');
const util = require('util');
const FormData = require('form-data');

/**
 * üé§ –ú–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
 * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram –≤ —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ OpenAI Whisper API
 */
class VoiceHandler {
  constructor() {
    this.tempDir = './temp_audio/';
    this.maxFileSizeMB = 25; // –õ–∏–º–∏—Ç OpenAI Whisper API
    this.execAsync = util.promisify(exec);
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    if (!fs.existsSync(this.tempDir)) {
      fs.mkdirSync(this.tempDir, { recursive: true });
    }
    
    console.log('üé§ [VoiceHandler] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –º–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π');
  }

  /**
   * üì• –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param {Object} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram –±–æ—Ç–∞
   * @param {Object} msg - –°–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–æ–ª–æ—Å–æ–≤—ã–º —Ñ–∞–π–ª–æ–º
   * @returns {Promise<string>} - –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
   */
  async processVoiceMessage(bot, msg) {
    const voice = msg.voice;
    const userId = msg.from.id;
    
    console.log(`üé§ [VoiceHandler] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    console.log(`üìä –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${voice.duration}—Å, –†–∞–∑–º–µ—Ä: ${(voice.file_size / 1024).toFixed(1)}KB`);

    try {
      // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
      if (voice.file_size > this.maxFileSizeMB * 1024 * 1024) {
        throw new Error(`–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ (${(voice.file_size / 1024 / 1024).toFixed(1)}MB). –ú–∞–∫—Å–∏–º—É–º ${this.maxFileSizeMB}MB`);
      }

      // 2. –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –æ—Ç Telegram
      const oggFilePath = await this.downloadVoiceFile(bot, voice.file_id, userId);
      
      // 3. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º OGG –≤ MP3 (—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ Whisper API)
      const mp3FilePath = await this.convertOggToMp3(oggFilePath);
      
      // 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ OpenAI Whisper –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
      const transcription = await this.transcribeAudio(mp3FilePath);
      
      // 5. –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
      this.cleanupTempFiles([oggFilePath, mp3FilePath]);
      
      console.log(`‚úÖ [VoiceHandler] –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: "${transcription.substring(0, 50)}..."`);
      
      return transcription;
      
    } catch (error) {
      console.error('‚ùå [VoiceHandler] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      throw error;
    }
  }

  /**
   * üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –∏–∑ Telegram
   * @param {Object} bot - Telegram bot instance
   * @param {string} fileId - ID —Ñ–∞–π–ª–∞ –≤ Telegram
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<string>} - –ü—É—Ç—å –∫ —Å–∫–∞—á–∞–Ω–Ω–æ–º—É OGG —Ñ–∞–π–ª—É
   */
  async downloadVoiceFile(bot, fileId, userId) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
      const fileInfo = await bot.getFile(fileId);
      const fileUrl = `https://api.telegram.org/file/bot${bot.token}/${fileInfo.file_path}`;
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
      const timestamp = Date.now();
      const oggFilePath = path.join(this.tempDir, `voice_${userId}_${timestamp}.ogg`);
      
      console.log(`üì• [VoiceHandler] –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª: ${fileUrl}`);
      
      // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
      await this.downloadFile(fileUrl, oggFilePath);
      
      return oggFilePath;
      
    } catch (error) {
      console.error('‚ùå [VoiceHandler] –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
    }
  }

  /**
   * üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –ø–æ URL
   * @param {string} url - URL —Ñ–∞–π–ª–∞
   * @param {string} filepath - –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
   * @returns {Promise<void>}
   */
  downloadFile(url, filepath) {
    return new Promise((resolve, reject) => {
      const file = fs.createWriteStream(filepath);
      
      https.get(url, (response) => {
        if (response.statusCode !== 200) {
          reject(new Error(`HTTP ${response.statusCode}: ${response.statusMessage}`));
          return;
        }
        
        response.pipe(file);
        
        file.on('finish', () => {
          file.close();
          resolve();
        });
        
        file.on('error', (err) => {
          fs.unlink(filepath, () => {}); // –£–¥–∞–ª—è–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–∞–π–ª
          reject(err);
        });
        
      }).on('error', (err) => {
        reject(err);
      });
    });
  }

  /**
   * üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è OGG –≤ MP3 —á–µ—Ä–µ–∑ FFmpeg
   * @param {string} oggFilePath - –ü—É—Ç—å –∫ OGG —Ñ–∞–π–ª—É
   * @returns {Promise<string>} - –ü—É—Ç—å –∫ MP3 —Ñ–∞–π–ª—É
   */
  async convertOggToMp3(oggFilePath) {
    const mp3FilePath = oggFilePath.replace('.ogg', '.mp3');
    
    try {
      console.log(`üîÑ [VoiceHandler] –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º OGG –≤ MP3: ${path.basename(oggFilePath)}`);
      
      // FFmpeg –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
      const command = `ffmpeg -i "${oggFilePath}" -acodec mp3 -ar 16000 -ab 32k "${mp3FilePath}" -y`;
      
      const { stdout, stderr } = await this.execAsync(command);
      
      if (stderr && !stderr.includes('size=')) {
        console.warn('‚ö†Ô∏è [VoiceHandler] FFmpeg warnings:', stderr);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–ª—Å—è
      if (!fs.existsSync(mp3FilePath)) {
        throw new Error('MP3 —Ñ–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω');
      }
      
      console.log(`‚úÖ [VoiceHandler] –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${path.basename(mp3FilePath)}`);
      
      return mp3FilePath;
      
    } catch (error) {
      console.error('‚ùå [VoiceHandler] –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ —Ñ–∞–π–ª');
    }
  }

  /**
   * üß† –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —á–µ—Ä–µ–∑ OpenAI Whisper API
   * @param {string} mp3FilePath - –ü—É—Ç—å –∫ MP3 —Ñ–∞–π–ª—É
   * @returns {Promise<string>} - –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
   */
  async transcribeAudio(mp3FilePath) {
    try {
      console.log(`üß† [VoiceHandler] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ OpenAI Whisper: ${path.basename(mp3FilePath)}`);
      
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è multipart/form-data
      const fileStats = fs.statSync(mp3FilePath);
      const fileStream = fs.createReadStream(mp3FilePath);
      
      console.log(`üìä –†–∞–∑–º–µ—Ä MP3: ${(fileStats.size / 1024).toFixed(1)}KB`);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º OpenAI API –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
      const formData = new FormData();
      formData.append('file', fileStream, {
        filename: path.basename(mp3FilePath),
        contentType: 'audio/mp3'
      });
      formData.append('model', 'whisper-1');
      formData.append('language', 'ru'); // –£–∫–∞–∑—ã–≤–∞–µ–º —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
      formData.append('response_format', 'text');
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º Promise –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–∞
      const response = await new Promise((resolve, reject) => {
        const options = {
          hostname: 'api.openai.com',
          path: '/v1/audio/transcriptions',
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
            ...formData.getHeaders()
          }
        };

        const req = https.request(options, (res) => {
          let data = '';
          res.on('data', chunk => data += chunk);
          res.on('end', () => {
            resolve({
              ok: res.statusCode === 200,
              status: res.statusCode,
              text: () => Promise.resolve(data),
              statusText: res.statusMessage
            });
          });
        });

        req.on('error', reject);
        formData.pipe(req);
      });
      
      if (!response.ok) {
        const errorData = await response.text();
        throw new Error(`OpenAI API Error: ${response.status} - ${errorData}`);
      }
      
      const transcription = await response.text();
      
      if (!transcription || transcription.trim().length === 0) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å –≤ –∞—É–¥–∏–æ');
      }
      
      return transcription.trim();
      
    } catch (error) {
      console.error('‚ùå [VoiceHandler] –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏:', error);
      
      if (error.message.includes('API key')) {
        throw new Error('–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏—Å—Ç–µ–º–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏');
      }
      
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏');
    }
  }

  /**
   * üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
   * @param {string[]} filePaths - –ú–∞—Å—Å–∏–≤ –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
   */
  cleanupTempFiles(filePaths) {
    filePaths.forEach(filePath => {
      try {
        if (fs.existsSync(filePath)) {
          fs.unlinkSync(filePath);
          console.log(`üßπ [VoiceHandler] –£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: ${path.basename(filePath)}`);
        }
      } catch (error) {
        console.warn(`‚ö†Ô∏è [VoiceHandler] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å ${filePath}:`, error.message);
      }
    });
  }

  /**
   * üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ FFmpeg
   * @returns {Promise<boolean>} - true –µ—Å–ª–∏ FFmpeg –¥–æ—Å—Ç—É–ø–µ–Ω
   */
  async checkFFmpegAvailability() {
    try {
      const { stdout } = await this.execAsync('ffmpeg -version');
      console.log('‚úÖ [VoiceHandler] FFmpeg –¥–æ—Å—Ç—É–ø–µ–Ω:', stdout.split('\n')[0]);
      return true;
    } catch (error) {
      console.error('‚ùå [VoiceHandler] FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω:', error.message);
      return false;
    }
  }

  /**
   * üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ OpenAI API
   * @returns {Promise<boolean>} - true –µ—Å–ª–∏ API –∫–ª—é—á –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
   */
  async checkOpenAIAvailability() {
    try {
      if (!process.env.OPENAI_API_KEY) {
        console.error('‚ùå [VoiceHandler] OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env');
        return false;
      }
      
      if (process.env.OPENAI_API_KEY === 'your_openai_api_key_here') {
        console.error('‚ùå [VoiceHandler] OPENAI_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è placeholder)');
        return false;
      }
      
      // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ HTTP –∑–∞–ø—Ä–æ—Å
      return new Promise((resolve) => {
        const options = {
          hostname: 'api.openai.com',
          path: '/v1/models',
          method: 'GET',
          headers: {
            'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
          }
        };

        const req = https.request(options, (res) => {
          if (res.statusCode === 200) {
            console.log('‚úÖ [VoiceHandler] OpenAI API –¥–æ—Å—Ç—É–ø–µ–Ω');
            resolve(true);
          } else {
            console.error(`‚ùå [VoiceHandler] OpenAI API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${res.statusCode}`);
            resolve(false);
          }
        });

        req.on('error', (error) => {
          console.error('‚ùå [VoiceHandler] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ OpenAI API:', error.message);
          resolve(false);
        });

        req.end();
      });
      
    } catch (error) {
      console.error('‚ùå [VoiceHandler] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ OpenAI API:', error.message);
      return false;
    }
  }

  /**
   * üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
   * @returns {Promise<boolean>} - true –µ—Å–ª–∏ –≤—Å–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ
   */
  async initialize() {
    console.log('üöÄ [VoiceHandler] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...');
    
    const ffmpegOk = await this.checkFFmpegAvailability();
    const openaiOk = await this.checkOpenAIAvailability();
    
    if (!ffmpegOk) {
      console.log('üì¶ [VoiceHandler] –î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ FFmpeg –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: apt update && apt install -y ffmpeg');
    }
    
    if (!openaiOk) {
      console.log('üîë [VoiceHandler] –î–æ–±–∞–≤—å—Ç–µ OPENAI_API_KEY –≤ —Ñ–∞–π–ª .env');
    }
    
    const isReady = ffmpegOk && openaiOk;
    
    if (isReady) {
      console.log('üéâ [VoiceHandler] –ú–æ–¥—É–ª—å –≥–æ—Ç–æ–≤ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π!');
    } else {
      console.log('‚ö†Ô∏è [VoiceHandler] –ú–æ–¥—É–ª—å –Ω–µ –≥–æ—Ç–æ–≤. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –≤—ã—à–µ.');
    }
    
    return isReady;
  }
}

module.exports = VoiceHandler;