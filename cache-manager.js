require('dotenv').config();
const Anthropic = require('@anthropic-ai/sdk');

/**
 * üî• –ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–ª—è Claude API
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π prompt caching —Å cache_control
 * 
 * –≠–ö–û–ù–û–ú–ò–Ø: –î–æ 90% —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏ 85% –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –∑–∞–∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 */
class CacheManager {
  constructor() {
    this.anthropic = new Anthropic({
      apiKey: process.env.ANTHROPIC_API_KEY
    });
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
    this.stats = {
      totalRequests: 0,
      cacheHits: 0,
      cacheMisses: 0,
      tokensWrittenToCache: 0,
      tokensReadFromCache: 0,
      costSavings: 0
    };
  }

  /**
   * üéØ –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º system –ø—Ä–æ–º–ø—Ç–∞
   * @param {Object} options - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
   * @param {string} options.model - –ú–æ–¥–µ–ª—å Claude
   * @param {number} options.maxTokens - –ú–∞–∫—Å–∏–º—É–º —Ç–æ–∫–µ–Ω–æ–≤
   * @param {string|Array} options.system - System –ø—Ä–æ–º–ø—Ç (–±—É–¥–µ—Ç –∑–∞–∫–µ—à–∏—Ä–æ–≤–∞–Ω)
   * @param {Array} options.messages - –°–æ–æ–±—â–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
   * @param {boolean} options.enableCaching - –í–∫–ª—é—á–∏—Ç—å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é true)
   * @returns {Promise<Object>} - –û—Ç–≤–µ—Ç API —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  async createMessage(options) {
    const {
      model = 'claude-3-5-haiku-20241022',
      maxTokens = 1000,
      system,
      messages,
      enableCaching = true
    } = options;

    this.stats.totalRequests++;

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º system –ø—Ä–æ–º–ø—Ç –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
    let systemPrompt = system;
    if (enableCaching && system) {
      // –ï—Å–ª–∏ system —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∞—Å—Å–∏–≤ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
      if (typeof system === 'string') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
        if (system.length > 1000) { // –ü—Ä–∏–º–µ—Ä–Ω–æ 1000+ —Ç–æ–∫–µ–Ω–æ–≤
          systemPrompt = [
            {
              type: "text",
              text: system,
              cache_control: { type: "ephemeral" }
            }
          ];
        }
      } 
      // –ï—Å–ª–∏ system —É–∂–µ –º–∞—Å—Å–∏–≤, –¥–æ–±–∞–≤–ª—è–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
      else if (Array.isArray(system)) {
        systemPrompt = [...system];
        if (systemPrompt.length > 0) {
          systemPrompt[systemPrompt.length - 1].cache_control = { type: "ephemeral" };
        }
      }
    }

    try {
      const requestOptions = {
        model,
        max_tokens: maxTokens,
        messages
      };

      // –î–æ–±–∞–≤–ª—è–µ–º system –ø—Ä–æ–º–ø—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
      if (systemPrompt) {
        requestOptions.system = systemPrompt;
      }

      // Beta header —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ constructor —á–µ—Ä–µ–∑ defaultHeaders

      console.log(`üî• [CacheManager] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º: ${enableCaching}`);

      const response = await this.anthropic.messages.create(requestOptions);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
      this._updateCacheStats(response);

      return {
        content: response.content[0].text,
        usage: response.usage,
        cacheStats: this._extractCacheStats(response)
      };

    } catch (error) {
      console.error('üö® [CacheManager] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      throw error;
    }
  }

  /**
   * üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
   * @private
   */
  _updateCacheStats(response) {
    const usage = response.usage;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –æ—Ç–≤–µ—Ç–µ
    if (usage.cache_creation_input_tokens || usage.cache_read_input_tokens) {
      
      if (usage.cache_creation_input_tokens > 0) {
        this.stats.cacheMisses++;
        this.stats.tokensWrittenToCache += usage.cache_creation_input_tokens;
        console.log(`üìù [Cache] –°–æ–∑–¥–∞–Ω –∫–µ—à: ${usage.cache_creation_input_tokens} —Ç–æ–∫–µ–Ω–æ–≤`);
      }
      
      if (usage.cache_read_input_tokens > 0) {
        this.stats.cacheHits++;
        this.stats.tokensReadFromCache += usage.cache_read_input_tokens;
        
        // –†–∞—Å—á–µ—Ç —ç–∫–æ–Ω–æ–º–∏–∏ (–ø—Ä–∏–º–µ—Ä–Ω–æ 90% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏)
        const savedTokens = usage.cache_read_input_tokens;
        this.stats.costSavings += savedTokens * 0.9; // 90% —ç–∫–æ–Ω–æ–º–∏–∏
        
        console.log(`‚úÖ [Cache HIT] –ü—Ä–æ—á–∏—Ç–∞–Ω–æ –∏–∑ –∫–µ—à–∞: ${usage.cache_read_input_tokens} —Ç–æ–∫–µ–Ω–æ–≤`);
      }
    } else {
      console.log(`‚ö™ [Cache] –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–æ—Å—å`);
    }
  }

  /**
   * üìà –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –æ—Ç–≤–µ—Ç–∞
   * @private
   */
  _extractCacheStats(response) {
    const usage = response.usage;
    return {
      inputTokens: usage.input_tokens || 0,
      outputTokens: usage.output_tokens || 0,
      cacheCreationTokens: usage.cache_creation_input_tokens || 0,
      cacheReadTokens: usage.cache_read_input_tokens || 0,
      totalTokens: (usage.input_tokens || 0) + (usage.output_tokens || 0)
    };
  }

  /**
   * üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  getCacheStats() {
    const hitRate = this.stats.totalRequests > 0 
      ? (this.stats.cacheHits / this.stats.totalRequests * 100).toFixed(1)
      : 0;

    return {
      ...this.stats,
      hitRate: `${hitRate}%`,
      totalSavedTokens: this.stats.tokensReadFromCache,
      estimatedCostSavings: this.stats.costSavings
    };
  }

  /**
   * üßπ –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  resetStats() {
    this.stats = {
      totalRequests: 0,
      cacheHits: 0,
      cacheMisses: 0,
      tokensWrittenToCache: 0,
      tokensReadFromCache: 0,
      costSavings: 0
    };
  }

  /**
   * üìã –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  logCacheStats() {
    const stats = this.getCacheStats();
    console.log(`
üî• === –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–ï–®–ò–†–û–í–ê–ù–ò–Ø ===
üìä –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${stats.totalRequests}
‚úÖ Cache hits: ${stats.cacheHits} (${stats.hitRate})
‚ùå Cache misses: ${stats.cacheMisses}
üìù –¢–æ–∫–µ–Ω–æ–≤ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –∫–µ—à: ${stats.tokensWrittenToCache}
üìñ –¢–æ–∫–µ–Ω–æ–≤ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ –∏–∑ –∫–µ—à–∞: ${stats.tokensReadFromCache}
üí∞ –¢–æ–∫–µ–Ω–æ–≤ —Å—ç–∫–æ–Ω–æ–º–ª–µ–Ω–æ: ${stats.totalSavedTokens}
üíµ –ü—Ä–∏–º–µ—Ä–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏—è: ${stats.estimatedCostSavings.toFixed(0)} —Ç–æ–∫–µ–Ω–æ–≤
===================================
    `);
  }
}

module.exports = CacheManager;

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è, –µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  async function testCaching() {
    const cacheManager = new CacheManager();
    
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ...');
    
    const systemPrompt = `–¢—ã –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–∞—Ü–∏–µ–Ω—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤. –¢–≤–æ—è —Ä–æ–ª—å: –∏–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ —Å –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç–æ–º.

–û–°–ù–û–í–ù–´–ï –ü–†–ò–ù–¶–ò–ü–´:
- –í–µ–¥–∏ —Å–µ–±—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –∫–∞–∫ —Ä–µ–∞–ª—å–Ω—ã–π —á–µ–ª–æ–≤–µ–∫ —Å –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏
- –ü—Ä–æ—è–≤–ª—è–π —ç–º–æ—Ü–∏–∏, —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ, –∑–∞—â–∏—Ç–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã
- –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–∏–º–∏ —Ñ—Ä–∞–∑–∞–º–∏, –∫–∞–∫ –≤ –∂–∏–≤–æ–º –¥–∏–∞–ª–æ–≥–µ
- –ù–µ —Å–æ–≥–ª–∞—à–∞–π—Å—è —Å—Ä–∞–∑—É –Ω–∞ –≤—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ç–µ—Ä–∞–ø–µ–≤—Ç–∞
- –ü–æ–∫–∞–∑—ã–≤–∞–π –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤—ã–µ —á—É–≤—Å—Ç–≤–∞ –∏ –º—ã—Å–ª–∏

–°–¢–ò–õ–¨ –û–ë–©–ï–ù–ò–Ø:
- –ì–æ–≤–æ—Ä–∏ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞
- –ò—Å–ø–æ–ª—å–∑—É–π –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—É—é —Ä–µ—á—å
- –ü–æ–∫–∞–∂–∏ –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å, –ø–∞—É–∑—ã, —ç–º–æ—Ü–∏–∏
- –ò–Ω–æ–≥–¥–∞ –∏–∑–±–µ–≥–∞–π –ø—Ä—è–º—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
- –ü—Ä–æ—è–≤–ª—è–π —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ —Ç–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–æ–º—É –ø—Ä–æ—Ü–µ—Å—Å—É

–≠—Ç–æ –¥–ª–∏–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –≤ Claude API.`.repeat(3);

    try {
      // –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å - —Å–æ–∑–¥–∞–Ω–∏–µ –∫–µ—à–∞
      console.log('\n1Ô∏è‚É£ –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å (—Å–æ–∑–¥–∞–Ω–∏–µ –∫–µ—à–∞)...');
      const response1 = await cacheManager.createMessage({
        system: systemPrompt,
        messages: [
          { role: 'user', content: '–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?' }
        ],
        enableCaching: true
      });
      
      console.log('–û—Ç–≤–µ—Ç 1:', response1.content.substring(0, 100) + '...');
      console.log('Cache stats 1:', response1.cacheStats);

      // –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–µ—à–∞  
      console.log('\n2Ô∏è‚É£ –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–µ—à–∞)...');
      const response2 = await cacheManager.createMessage({
        system: systemPrompt,
        messages: [
          { role: 'user', content: '–ß—Ç–æ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç?' }
        ],
        enableCaching: true
      });
      
      console.log('–û—Ç–≤–µ—Ç 2:', response2.content.substring(0, 100) + '...');
      console.log('Cache stats 2:', response2.cacheStats);

      // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      cacheManager.logCacheStats();

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    }
  }

  testCaching();
}