#!/usr/bin/env node

/**
 * üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
 */

require('dotenv').config();
const VoiceHandler = require('./voice-handler');

async function testVoiceHandler() {
  console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï VOICEHANDLER\n');
  
  const voiceHandler = new VoiceHandler();
  
  console.log('üîß –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...\n');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º FFmpeg
  const ffmpegOk = await voiceHandler.checkFFmpegAvailability();
  console.log(`FFmpeg: ${ffmpegOk ? '‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' : '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º OpenAI API
  const openaiOk = await voiceHandler.checkOpenAIAvailability();
  console.log(`OpenAI API: ${openaiOk ? '‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' : '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã
  console.log('\nüöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...');
  const isReady = await voiceHandler.initialize();
  
  console.log(`\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢: ${isReady ? '‚úÖ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ' : '‚ùå –¢—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'}`);
  
  if (!isReady) {
    console.log('\nüìù –î–õ–Ø –ê–ö–¢–ò–í–ê–¶–ò–ò –ì–û–õ–û–°–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô:');
    
    if (!ffmpegOk) {
      console.log('1. FFmpeg —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚úÖ');
    }
    
    if (!openaiOk) {
      console.log('2. –î–æ–±–∞–≤—å—Ç–µ OPENAI_API_KEY –≤ .env —Ñ–∞–π–ª');
      console.log('   –ü–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á: https://platform.openai.com/api-keys');
      console.log('   –§–æ—Ä–º–∞—Ç: OPENAI_API_KEY=sk-...');
    }
  } else {
    console.log('\nüéâ –í—Å–µ –≥–æ—Ç–æ–≤–æ! –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç.');
  }
  
  return isReady;
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
if (require.main === module) {
  testVoiceHandler()
    .then((result) => {
      console.log(`\nüèÅ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –†–µ–∑—É–ª—å—Ç–∞—Ç: ${result ? 'SUCCESS' : 'NEEDS_SETUP'}`);
      process.exit(result ? 0 : 1);
    })
    .catch((error) => {
      console.error('\nüí• –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      process.exit(1);
    });
}

module.exports = { testVoiceHandler };