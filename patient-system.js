require('dotenv').config();
const Anthropic = require('@anthropic-ai/sdk');
const fs = require('fs');
const CacheManager = require('./cache-manager');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –∫–ª–∏–µ–Ω—Ç–∞ (—Ç–µ–ø–µ—Ä—å —á–µ—Ä–µ–∑ CacheManager)
const anthropic = new Anthropic({
  apiKey: process.env.ANTHROPIC_API_KEY,
});

/**
 * –°–∏—Å—Ç–µ–º–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ò–ò-–ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤
 */
class PatientSystem {
  constructor() {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –æ–±—Ä–µ–∑–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    this.truncationThreshold = 0.95; // –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –±–æ–ª–µ–µ 95% —Ç–æ–∫–µ–Ω–æ–≤, —Å—á–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–±—Ä–µ–∑–∞–Ω–Ω—ã–º
    
    // üî• –ù–û–í–û–ï: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
    this.cacheManager = new CacheManager();
    console.log('üî• [PatientSystem] CacheManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤');
    // –ë–∞–∑–∞ —Å–ª—É—á–∞–µ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    this.casesDB = {
      anxiety: {
        name: "–¢—Ä–µ–≤–æ–∂–Ω—ã–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–∞",
        cases: [
          "–ì–µ–Ω–µ—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Ç—Ä–µ–≤–æ–∂–Ω–æ–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–æ",
          "–ü–∞–Ω–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–æ",
          "–°–æ—Ü–∏–∞–ª—å–Ω–∞—è —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å",
          "–°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ñ–æ–±–∏–∏"
        ]
      },
      mood: {
        name: "–†–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è",
        cases: [
          "–î–µ–ø—Ä–µ—Å—Å–∏—è (–ª–µ–≥–∫–∞—è-—É–º–µ—Ä–µ–Ω–Ω–∞—è)",
          "–î–∏—Å—Ç–∏–º–∏—è (—Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∞—è –¥–µ–ø—Ä–µ—Å—Å–∏—è)",
          "–°–µ–∑–æ–Ω–Ω–∞—è –¥–µ–ø—Ä–µ—Å—Å–∏—è",
          "–ü–æ—Å–ª–µ—Ä–æ–¥–æ–≤–∞—è –¥–µ–ø—Ä–µ—Å—Å–∏—è"
        ]
      },
      stress: {
        name: "–°—Ç—Ä–µ—Å—Å –∏ –∞–¥–∞–ø—Ç–∞—Ü–∏—è",
        cases: [
          "–û—Å—Ç—Ä–∞—è —Å—Ç—Ä–µ—Å—Å–æ–≤–∞—è —Ä–µ–∞–∫—Ü–∏—è",
          "–í—ã–≥–æ—Ä–∞–Ω–∏–µ –Ω–∞ —Ä–∞–±–æ—Ç–µ",
          "–ì–æ—Ä–µ–≤–∞–Ω–∏–µ (–ø–æ—Ç–µ—Ä—è –±–ª–∏–∑–∫–∏—Ö)",
          "–†–∞–∑–≤–æ–¥/—Ä–∞—Å—Å—Ç–∞–≤–∞–Ω–∏–µ"
        ]
      },
      relationships: {
        name: "–û—Ç–Ω–æ—à–µ–Ω–∏—è –∏ —Å–µ–º—å—è",
        cases: [
          "–°–µ–º–µ–π–Ω—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã",
          "–ü—Ä–æ–±–ª–µ–º—ã –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö",
          "–°–æ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å",
          "–ü—Ä–æ–±–ª–µ–º—ã –≤–æ—Å–ø–∏—Ç–∞–Ω–∏—è –¥–µ—Ç–µ–π"
        ]
      },
      trauma: {
        name: "–¢—Ä–∞–≤–º–∞",
        cases: [
          "–ü–¢–°–† (–±–æ–µ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è, –∞–≤–∞—Ä–∏–∏)",
          "–î–µ—Ç—Å–∫–∞—è —Ç—Ä–∞–≤–º–∞/–Ω–∞—Å–∏–ª–∏–µ",
          "–°–µ–∫—Å—É–∞–ª—å–Ω–æ–µ –Ω–∞—Å–∏–ª–∏–µ",
          "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –Ω–∞—Å–∏–ª–∏–µ"
        ]
      },
      addictions: {
        name: "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏",
        cases: [
          "–ê–ª–∫–æ–≥–æ–ª—å–Ω–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å",
          "–ù–∞—Ä–∫–æ—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å",
          "–ò–≥—Ä–æ–≤–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å",
          "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç/—Å–æ—Ü—Å–µ—Ç–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å"
        ]
      },
      eating: {
        name: "–†–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–∏—â–µ–≤–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è",
        cases: [
          "–ê–Ω–æ—Ä–µ–∫—Å–∏—è",
          "–ë—É–ª–∏–º–∏—è",
          "–ö–æ–º–ø—É–ª—å—Å–∏–≤–Ω–æ–µ –ø–µ—Ä–µ–µ–¥–∞–Ω–∏–µ"
        ]
      },
      psychotic: {
        name: "–ü—Å–∏—Ö–æ—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–∞",
        cases: [
          "–ü–µ—Ä–≤—ã–π –ø—Å–∏—Ö–æ—Ç–∏—á–µ—Å–∫–∏–π —ç–ø–∏–∑–æ–¥",
          "–®–∏–∑–æ—Ñ—Ä–µ–Ω–∏—è",
          "–ë—Ä–µ–¥–æ–≤–æ–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"
        ]
      },
      affective: {
        name: "–¢—è–∂–µ–ª—ã–µ –∞—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–∞",
        cases: [
          "–¢—è–∂–µ–ª–∞—è –¥–µ–ø—Ä–µ—Å—Å–∏—è",
          "–ë–∏–ø–æ–ª—è—Ä–Ω–æ–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–æ (–º–∞–Ω–∏—è)",
          "–°–º–µ—à–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è"
        ]
      },
      crisis: {
        name: "–ö—Ä–∏–∑–∏—Å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è",
        cases: [
          "–°—É–∏—Ü–∏–¥–∞–ª—å–Ω—ã–µ –º—ã—Å–ª–∏",
          "–ü–∞—Ä–∞—Å—É–∏—Ü–∏–¥",
          "–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç—å/—É–≥—Ä–æ–∑–∞ –Ω–∞—Å–∏–ª–∏—è"
        ]
      },
      personality: {
        name: "–†–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ª–∏—á–Ω–æ—Å—Ç–∏",
        cases: [
          "–ü–æ–≥—Ä–∞–Ω–∏—á–Ω–æ–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ª–∏—á–Ω–æ—Å—Ç–∏",
          "–ù–∞—Ä—Ü–∏—Å—Å–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–æ",
          "–ê–Ω—Ç–∏—Å–æ—Ü–∏–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"
        ]
      },
      youth: {
        name: "–î–µ—Ç—Å–∫–æ-–ø–æ–¥—Ä–æ—Å—Ç–∫–æ–≤—ã–µ",
        cases: [
          "–®–∫–æ–ª—å–Ω–∞—è —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å",
          "–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–∞–º–æ–æ—Ü–µ–Ω–∫–æ–π",
          "–ë—É–ª–ª–∏–Ω–≥",
          "–†–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è"
        ]
      },
      elderly: {
        name: "–ü–æ–∂–∏–ª—ã–µ –ª—é–¥–∏",
        cases: [
          "–î–µ–ø—Ä–µ—Å—Å–∏—è –≤ –ø–æ–∂–∏–ª–æ–º –≤–æ–∑—Ä–∞—Å—Ç–µ",
          "–¢—Ä–µ–≤–æ–≥–∞ –ø–æ –ø–æ–≤–æ–¥—É –∑–¥–æ—Ä–æ–≤—å—è",
          "–û–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ/–∏–∑–æ–ª—è—Ü–∏—è"
        ]
      },
      identity: {
        name: "–ü—Ä–æ–±–ª–µ–º—ã –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏",
        cases: [
          "–ì–µ–Ω–¥–µ—Ä–Ω–∞—è –¥–∏—Å—Ñ–æ—Ä–∏—è",
          "–í–æ–ø—Ä–æ—Å—ã —Å–µ–∫—Å—É–∞–ª—å–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏",
          "–ö—Ä–æ—Å—Å-–∫—É–ª—å—Ç—É—Ä–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è",
          "–ö—Ä–∏–∑–∏—Å —á–µ—Ç–≤–µ—Ä—Ç–∏/—Å—Ä–µ–¥–Ω–µ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞"
        ]
      },
      neurodiverse: {
        name: "–ù–µ–π—Ä–æ—Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ",
        cases: [
          "–°–î–í–ì —É –≤–∑—Ä–æ—Å–ª—ã—Ö",
          "–†–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∞—É—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–ø–µ–∫—Ç—Ä–∞",
          "–û–±—Å–µ—Å—Å–∏–≤–Ω–æ-–∫–æ–º–ø—É–ª—å—Å–∏–≤–Ω–æ–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"
        ]
      }
    };
    
    // –¢–∏–ø—ã –æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç–∏ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
    this.openness = {
      open: {
        name: "–û—Ç–∫—Ä—ã—Ç—ã–π",
        description: "–û—Å–æ–∑–Ω–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É, —Å–∞–º –æ–±—Ä–∞—Ç–∏–ª—Å—è –∑–∞ –ø–æ–º–æ—â—å—é, –≥–æ—Ç–æ–≤ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–∞—Ç—å",
        resistance: "–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ, –æ–±—ã—á–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
        motivation: "–í—ã—Å–æ–∫–∞—è, —Ö–æ—á–µ—Ç —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É"
      },
      neutral: {
        name: "–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π",
        description: "–ß–∞—Å—Ç–∏—á–Ω–æ –æ—Å–æ–∑–Ω–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É, –µ—Å—Ç—å –∞–º–±–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç—å",
        resistance: "–°—Ä–µ–¥–Ω–µ–µ, –∏–Ω–æ–≥–¥–∞ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª—è–µ—Ç—Å—è, –∏–Ω–æ–≥–¥–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–∞–µ—Ç",
        motivation: "–°—Ä–µ–¥–Ω—è—è, –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫–µ –º–æ—Ç–∏–≤–∞—Ü–∏–∏"
      },
      closed: {
        name: "–ó–∞–∫—Ä—ã—Ç—ã–π",
        description: "–ü—Ä–∏—à–µ–ª –Ω–µ –ø–æ —Å–≤–æ–µ–π –≤–æ–ª–µ, –æ—Ç—Ä–∏—Ü–∞–µ—Ç/–º–∏–Ω–∏–º–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–±–ª–µ–º—É",
        resistance: "–í—ã—Å–æ–∫–æ–µ, –∞–∫—Ç–∏–≤–Ω–æ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª—è–µ—Ç—Å—è, –∑–∞—â–∏—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ",
        motivation: "–ù–∏–∑–∫–∞—è, –≤–Ω–µ—à–Ω—è—è (–ø–æ –Ω–∞—Å—Ç–æ—è–Ω–∏—é –±–ª–∏–∑–∫–∏—Ö)"
      }
    };
    
    // –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∑–∞—â–∏—Ç—ã
    this.defenses = [
      "–æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ", "—Ä–∞—Ü–∏–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è", "–ø—Ä–æ–µ–∫—Ü–∏—è", "–≤—ã—Ç–µ—Å–Ω–µ–Ω–∏–µ", 
      "–∏–∑–±–µ–≥–∞–Ω–∏–µ", "–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è", "–º–∏–Ω–∏–º–∏–∑–∞—Ü–∏—è", "–¥–∏—Å—Å–æ—Ü–∏–∞—Ü–∏—è",
      "—Ä–µ–≥—Ä–µ—Å—Å–∏—è", "–æ–±–µ—Å—Ü–µ–Ω–∏–≤–∞–Ω–∏–µ", "–∏–¥–µ–∞–ª–∏–∑–∞—Ü–∏—è", "–≤—Å–µ–º–æ–≥—É—â–µ—Å—Ç–≤–æ"
    ];
  }
  
  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Å–ª—É—á–∞—è
   * @param {object} params - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
   * @returns {Promise<object>} - –î–∞–Ω–Ω—ã–µ –æ –ø–∞—Ü–∏–µ–Ω—Ç–µ
   */
  async generateCase(params = {}) {
    // –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–ª—É—á–∞—è –∏–ª–∏ —Å–ª—É—á–∞–π–Ω–æ–π 
    const category = params.category || this.getRandomKey(this.casesDB);
    const categoryData = this.casesDB[category];
    
    // –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ª—É—á–∞—è –∏–ª–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ
    const caseIndex = params.caseIndex !== undefined ? 
                      params.caseIndex : 
                      Math.floor(Math.random() * categoryData.cases.length);
    const diagnosis = categoryData.cases[caseIndex];
    
    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç–∏
    const opennessType = params.openness || this.getRandomKey(this.openness);
    const openness = this.openness[opennessType];
    
    // –°–ª–æ–∂–Ω–æ—Å—Ç—å —Å–ª—É—á–∞—è (1-5)
    const complexity = params.complexity || Math.floor(Math.random() * 5) + 1;
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–µ—Ç–∞–ª–µ–π –ø–∞—Ü–∏–µ–Ω—Ç–∞
    const casePrompt = `
–°–æ–∑–¥–∞–π –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ç—Ä–µ–Ω–∏–Ω–≥–∞. 

–í–ê–ñ–ù–û: –¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¢–û–õ–¨–ö–û –≤ –≤–∏–¥–µ –≤–∞–ª–∏–¥–Ω–æ–≥–æ JSON –æ–±—ä–µ–∫—Ç–∞, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, –ø–æ—è—Å–Ω–µ–Ω–∏–π –∏–ª–∏ markdown-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.

–ü–ê–†–ê–ú–ï–¢–†–´ –°–õ–£–ß–ê–Ø:
–î–∏–∞–≥–Ω–æ–∑: ${diagnosis}
–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${categoryData.name}
–û—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å: ${openness.name} (${openness.description})
–°–ª–æ–∂–Ω–æ—Å—Ç—å: ${complexity}/5

–¢–†–ï–ë–£–ï–ú–´–ï –ü–û–õ–Ø JSON-–û–ë–™–ï–ö–¢–ê:
{
  "name": "–ò–º—è –ø–∞—Ü–∏–µ–Ω—Ç–∞",
  "age": —á–∏—Å–ª–æ –æ—Ç 25 –¥–æ 55,
  "gender": "–º—É–∂—Å–∫–æ–π" –∏–ª–∏ "–∂–µ–Ω—Å–∫–∏–π",
  "profession": "–ü—Ä–æ—Ñ–µ—Å—Å–∏—è",
  "problem": "–û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ (–∫–∞–∫ –≤–∏–¥–∏—Ç –µ—ë –ø–∞—Ü–∏–µ–Ω—Ç, 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)",
  "symptoms": ["–°–∏–º–ø—Ç–æ–º 1", "–°–∏–º–ø—Ç–æ–º 2", "–°–∏–º–ø—Ç–æ–º 3"],
  "motivation": "–ü–æ—á–µ–º—É –ø—Ä–∏—à–µ–ª –∫ –ø—Å–∏—Ö–æ–ª–æ–≥—É",
  "openness": "–û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ —Ç–µ—Ä–∞–ø–∏–∏, ${openness.name}",
  "history": "–ö—Ä–∞—Ç–∫–∞—è –∏—Å—Ç–æ—Ä–∏—è –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã",
  "triggers": ["–¢—Ä–∏–≥–≥–µ—Ä 1", "–¢—Ä–∏–≥–≥–µ—Ä 2"],
  "coping": ["–°–ø–æ—Å–æ–± 1", "–°–ø–æ—Å–æ–± 2"],
  "defenses": ["–ó–∞—â–∏—Ç–∞ 1", "–ó–∞—â–∏—Ç–∞ 2"],
  "speech": "–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–µ—á–∏, –≤—ã—Ä–∞–∂–µ–Ω–∏—è —ç–º–æ—Ü–∏–π",
  "resistance": "–ö–∞–∫ –ø—Ä–æ—è–≤–ª—è–µ—Ç —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –≤ —Ç–µ—Ä–∞–ø–∏–∏",
  "background": "–°–µ–º–µ–π–Ω–∞—è/—Å–æ—Ü–∏–∞–ª—å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è"
}

–°–æ–∑–¥–∞–π —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ, –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ. –°–ª–æ–∂–Ω–æ—Å—Ç—å ${complexity}/5 –æ–∑–Ω–∞—á–∞–µ—Ç ${this.getComplexityDescription(complexity)}.

–í–ê–ñ–ù–û: –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–π JSON-–æ–±—ä–µ–∫—Ç –±–µ–∑ –∫–∞–≤—ã—á–µ–∫, markdown-–±–ª–æ–∫–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–π.`;

    try {
      const response = await anthropic.messages.create({
        model: 'claude-3-5-haiku-20241022',
        max_tokens: 1000,
        system: "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –≤ –∫–ª–∏–Ω–∏—á–µ—Å–∫–æ–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏, —Å–æ–∑–¥–∞—é—â–∏–π —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤. –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –æ—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –Ω–∞ –†–£–°–°–ö–û–ú —è–∑—ã–∫–µ. –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–π –æ—Ç–≤–µ—Ç –¢–û–õ–¨–ö–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞. JSON –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–º –ø–æ–ª—è–º. –í–°–ï –∑–Ω–∞—á–µ–Ω–∏—è –≤ JSON –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.",
        messages: [
          { role: 'user', content: casePrompt }
        ]
      });
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ –ø–∞—Ä—Å–∏–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
      const text = response.content[0].text;
      console.log("–û—Ç–≤–µ—Ç Claude API:", text.substring(0, 200) + "...");
      
      // –†–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã JSON –≤ –æ—Ç–≤–µ—Ç–µ
      const jsonPatterns = [
        /```json\n([\s\S]*?)\n```/, // JSON –≤ –±–ª–æ–∫–µ –∫–æ–¥–∞
        /```([\s\S]*?)```/, // –ü—Ä–æ—Å—Ç–æ –±–ª–æ–∫ –∫–æ–¥–∞
        /{[\s\S]*?}/,  // –¢–æ–ª—å–∫–æ —Å–∞–º JSON –æ–±—ä–µ–∫—Ç
        /\{[\s\S]*\}/  // JSON —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
      ];
      
      let patientData;
      let parsed = false;
      
      // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ JSON
      for (const pattern of jsonPatterns) {
        if (parsed) break;
        
        const match = text.match(pattern);
        if (match) {
          try {
            // –û—á–∏—â–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ markdown-—Å–∏–º–≤–æ–ª—ã –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
            const jsonText = match[1] || match[0];
            const cleanedJson = jsonText.replace(/^```json\n|```$/g, '').trim();
            patientData = JSON.parse(cleanedJson);
            parsed = true;
            console.log("JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω –ø–æ —à–∞–±–ª–æ–Ω—É:", pattern);
          } catch (e) {
            console.log("–ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ —à–∞–±–ª–æ–Ω—É:", pattern);
          }
        }
      }
      
      // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ —Ä–∞—Å–ø–∞—Ä—Å–∏–ª–∏, –ø—Ä–æ–±—É–µ–º —Ä—É—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
      if (!parsed) {
        try {
          // –ò—â–µ–º –≤—Å—ë —á—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ JSON –æ–±—ä–µ–∫—Ç
          const potentialJson = text.substring(
            text.indexOf('{'), 
            text.lastIndexOf('}') + 1
          );
          
          // –û—á–∏—â–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ markdown-—Å–∏–º–≤–æ–ª—ã
          const cleanedJson = potentialJson
            .replace(/^```json\n|```$/g, '')
            .replace(/\\n/g, '')
            .replace(/\\"/g, '"')
            .trim();
            
          patientData = JSON.parse(cleanedJson);
          parsed = true;
          console.log("JSON —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω –ø–æ—Å–ª–µ —Ä—É—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏");
        } catch (e) {
          console.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –ø–æ—Å–ª–µ —Ä—É—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏:", e);
          console.log("–ò—Å—Ö–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç:", text);
          throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –≤ –æ—Ç–≤–µ—Ç–µ Claude. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ API.");
        }
      }
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
      patientData.meta = {
        category: categoryData.name,
        diagnosis: diagnosis,
        complexity: complexity,
        openness: openness.name,
        created: new Date().toISOString(),
        token_usage: {
          input: response.usage.input_tokens,
          output: response.usage.output_tokens,
          total: response.usage.input_tokens + response.usage.output_tokens
        }
      };
      
      return patientData;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞—è:", error);
      throw error;
    }
  }
  
  /**
   * –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è Claude –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–∞
   * @param {object} patientData - –î–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞
   * @returns {string} - –ü—Ä–æ–º–ø—Ç –¥–ª—è Claude
   */
  createPatientPrompt(patientData) {
    return `–¢—ã –ø–∞—Ü–∏–µ–Ω—Ç —Å ${patientData.meta.diagnosis}. –¢–≤–æ–π —Ç–∏–ø –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∫ —Ç–µ—Ä–∞–ø–∏–∏: ${patientData.openness}.

üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: 
- –û—Ç–≤–µ—á–∞–π –ò–°–ö–õ–Æ–ß–ò–¢–ï–õ–¨–ù–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
- –ó–ê–ü–†–ï–©–ï–ù–û –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞, —Ñ—Ä–∞–∑—ã –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏—è
- –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –æ–ø–∏—Å—ã–≤–∞–π —Ä—É—Å—Å–∫–∏–º–∏ —Å–ª–æ–≤–∞–º–∏ –≤ —Å–∫–æ–±–∫–∞—Ö
- –ü—Ä–∏–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏–π: (—Å–º–æ—Ç—Ä–∏—Ç –≤ —Å—Ç–æ—Ä–æ–Ω—É), (—Å–∂–∏–º–∞–µ—Ç –∫—É–ª–∞–∫–∏), (–≤–∑–¥—ã—Ö–∞–µ—Ç)

–ü—Ä–∏ –ø–µ—Ä–≤–æ–º –æ—Ç–≤–µ—Ç–µ –ø—Å–∏—Ö–æ–ª–æ–≥—É:
1. –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Å—è (${patientData.name}, ${patientData.age} –ª–µ—Ç, ${patientData.profession})
2. –ö—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏ –æ–¥–Ω—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é, —Å–≤—è–∑–∞–Ω–Ω—É—é —Å "${patientData.problem}"
3. –£–ø–æ–º—è–Ω–∏ 1-2 —Å–∏–º–ø—Ç–æ–º–∞ –∏–∑ —Å–ø–∏—Å–∫–∞: ${patientData.symptoms.join(", ")}

–¢–≤–æ–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
- –ú–æ—Ç–∏–≤–∞—Ü–∏—è: ${patientData.motivation}
- –û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ —Ç–µ—Ä–∞–ø–∏–∏: ${patientData.openness}
- –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–±–ª–µ–º—ã: ${patientData.history}
- –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∑–∞—â–∏—Ç—ã: ${patientData.defenses.join(", ")}
- –¢—Ä–∏–≥–≥–µ—Ä—ã: ${patientData.triggers.join(", ")}
- –°–ø–æ—Å–æ–±—ã —Å–æ–≤–ª–∞–¥–∞–Ω–∏—è: ${patientData.coping.join(", ")}
- –°–µ–º–µ–π–Ω—ã–π —Ñ–æ–Ω: ${patientData.background}

–í –¥–∏–∞–ª–æ–≥–µ:
- –û—Ç–≤–µ—á–∞–π –ö–†–ê–¢–ö–û (2-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –º–∞–∫—Å–∏–º—É–º)
- –ì–æ–≤–æ—Ä–∏ –æ–±—Ä—ã–≤–æ—á–Ω–æ, —Å –ø–∞—É–∑–∞–º–∏ (–ø–æ–∫–∞–∑—ã–≤–∞–π –¥–µ–π—Å—Ç–≤–∏—è –≤ —Å–∫–æ–±–∫–∞—Ö —Ä—É—Å—Å–∫–∏–º–∏ —Å–ª–æ–≤–∞–º–∏)
- –ñ–¥–∏ —Ä–µ–∞–∫—Ü–∏–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∞, –Ω–µ –≤—ã–¥–∞–≤–∞–π –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å—Ä–∞–∑—É
- –ò—Å–ø–æ–ª—å–∑—É–π –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–µ—á–∏: ${patientData.speech}
- –ü—Ä–æ—è–≤–ª—è–π —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ: ${patientData.resistance}
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã (–≥–æ–≤–æ—Ä–∏ –æ–±—ã—á–Ω—ã–º —è–∑—ã–∫–æ–º)
- –î–µ—Ä–∂–∏—Å—å —Å–≤–æ–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–∞
- –ù–ï –ø—Ä–æ–∏–∑–Ω–æ—Å–∏ –¥–ª–∏–Ω–Ω—ã—Ö –º–æ–Ω–æ–ª–æ–≥–æ–≤
- –ò–Ω–æ–≥–¥–∞ –∑–∞–¥–∞–≤–∞–π –≤—Å—Ç—Ä–µ—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Å–∏—Ö–æ–ª–æ–≥—É
- –°–¢–†–û–ì–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ - –Ω–∏–∫–∞–∫–∏—Ö –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤!
- –î–µ–π—Å—Ç–≤–∏—è –¢–û–õ–¨–ö–û –≤ —Å–∫–æ–±–∫–∞—Ö: (–Ω–µ—Ä–≤–Ω–æ —Ç–µ—Ä–µ–±–∏—Ç –ø–∞–ø–∫—É), (–æ–ø—É—Å–∫–∞–µ—Ç –≥–ª–∞–∑–∞), (–ø–æ–ø—Ä–∞–≤–ª—è–µ—Ç –æ—á–∫–∏)

–ë—É–¥—å –∂–∏–≤—ã–º —á–µ–ª–æ–≤–µ–∫–æ–º, –∞ –Ω–µ –æ–±—Ä–∞–∑—Ü–æ–≤—ã–º –ø–∞—Ü–∏–µ–Ω—Ç–æ–º. –¢–≤–æ—è —Ü–µ–ª—å - —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –¥–∏–∞–ª–æ–≥, –∞ –Ω–µ –≤—ã–¥–∞—Ç—å –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å—Ä–∞–∑—É.`;
  }
  
  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Å –ø–∞—Ü–∏–µ–Ω—Ç–æ–º
   * @param {object} patientData - –î–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞
   * @param {string} question - –ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –ø—Å–∏—Ö–æ–ª–æ–≥–∞
   * @returns {Promise<object>} - –û—Ç–≤–µ—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∞
   */
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª –ª–∏ –æ—Ç–≤–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–±—Ä–µ–∑–∞–Ω –∏–∑-–∑–∞ –ª–∏–º–∏—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤
   * @param {object} response - –û—Ç–≤–µ—Ç API
   * @param {number} maxTokens - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
   * @returns {boolean} - true, –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–±—Ä–µ–∑–∞–Ω
   */
  isResponseTruncated(response, maxTokens) {
    // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –±–æ–ª–µ–µ truncationThreshold –æ—Ç –ª–∏–º–∏—Ç–∞, —Å—á–∏—Ç–∞–µ–º –µ–≥–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–±—Ä–µ–∑–∞–Ω–Ω—ã–º
    const usageRatio = response.usage.output_tokens / maxTokens;
    const isTruncated = usageRatio >= this.truncationThreshold;
    
    if (isTruncated) {
      console.log(`[–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ–±—Ä–µ–∑–∞–Ω–∏–µ] –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ ${response.usage.output_tokens}/${maxTokens} —Ç–æ–∫–µ–Ω–æ–≤ (${(usageRatio * 100).toFixed(1)}%)`);
    }
    
    return isTruncated;
  }
  
  async startPatientDialog(patientData, question = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß—Ç–æ –ø—Ä–∏–≤–µ–ª–æ –≤–∞—Å –∫–æ –º–Ω–µ —Å–µ–≥–æ–¥–Ω—è?") {
    const patientPrompt = this.createPatientPrompt(patientData);
    
    try {
      const maxTokens = 300;
      
      // üî• –ù–û–í–û–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º CacheManager –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ –ø–∞—Ü–∏–µ–Ω—Ç–∞
      const response = await this.cacheManager.createMessage({
        model: 'claude-3-5-haiku-20241022',
        maxTokens: maxTokens,
        system: patientPrompt,  // –≠—Ç–æ—Ç –±–æ–ª—å—à–æ–π –ø—Ä–æ–º–ø—Ç –±—É–¥–µ—Ç –∑–∞–∫–µ—à–∏—Ä–æ–≤–∞–Ω!
        messages: [
          { role: 'user', content: question }
        ],
        enableCaching: true
      });
      
      // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ (—Ç–µ–ø–µ—Ä—å —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
      console.log(`[–¢–æ–∫–µ–Ω—ã: –ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞] ${JSON.stringify(response.cacheStats)}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–µ–∑–∞–Ω –ª–∏ –æ—Ç–≤–µ—Ç (–∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞)
      const isTruncated = response.usage.output_tokens >= maxTokens * this.truncationThreshold;
      
      return {
        patient_response: response.content,
        token_usage: {
          input: response.usage.inputTokens,
          output: response.usage.outputTokens,
          total: response.usage.totalTokens,
          cache_creation: response.usage.cacheCreationTokens || 0,
          cache_read: response.usage.cacheReadTokens || 0
        },
        is_truncated: isTruncated,
        cache_stats: response.cacheStats
      };
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –¥–∏–∞–ª–æ–≥–∞:", error);
      throw error;
    }
  }
  
  /**
   * –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Å –ø–∞—Ü–∏–µ–Ω—Ç–æ–º
   * @param {object} patientData - –î–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞
   * @param {array} conversation - –ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
   * @param {string} question - –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –ø—Å–∏—Ö–æ–ª–æ–≥–∞
   * @returns {Promise<object>} - –û—Ç–≤–µ—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∞
   */
  async continuePatientDialog(patientData, conversation, question, isContinuation = false) {
    // –í—ã–±–∏—Ä–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø—Ä–æ–º–ø—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ª–∏ –º—ã –æ–±—Ä–µ–∑–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    let systemPrompt;
    if (isContinuation) {
      // –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
      systemPrompt = `–¢—ã –ø–∞—Ü–∏–µ–Ω—Ç —Å ${patientData.meta.diagnosis}. 
–ü—Ä–æ–¥–æ–ª–∂–∏ —Å–≤–æ–π –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç–≤–µ—Ç —Å —Ç–æ–≥–æ –º–µ—Å—Ç–∞, –≥–¥–µ –æ–Ω –±—ã–ª –æ–±—Ä–µ–∑–∞–Ω.
–ù–µ –ø–æ–≤—Ç–æ—Ä—è–π —É–∂–µ —Å–∫–∞–∑–∞–Ω–Ω–æ–µ, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∏ –º—ã—Å–ª—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –æ–±—Ä–∞–∑–æ–º.
–ì–æ–≤–æ—Ä–∏ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞, –∫–∞–∫ –ø–∞—Ü–∏–µ–Ω—Ç. –°–æ—Ö—Ä–∞–Ω—è–π –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–µ—á–∏ –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.`;
    } else {
      // –û–±—ã—á–Ω—ã–π –ø–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      systemPrompt = this.createPatientPrompt(patientData);
    }
    
    const messages = [];
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    for (const exchange of conversation) {
      messages.push({ role: 'user', content: exchange.therapist });
      messages.push({ role: 'assistant', content: exchange.patient });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
    if (!isContinuation) {
      messages.push({ role: 'user', content: question });
    }
    
    try {
      const maxTokens = 300;
      // üî• –ù–û–í–û–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º CacheManager –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ –ø–∞—Ü–∏–µ–Ω—Ç–∞
      const response = await this.cacheManager.createMessage({
        model: 'claude-3-5-haiku-20241022',
        maxTokens: maxTokens,
        system: systemPrompt,  // System –ø—Ä–æ–º–ø—Ç –∫–µ—à–∏—Ä—É–µ—Ç—Å—è
        messages: messages,
        enableCaching: true
      });
      
      // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ (—Ç–µ–ø–µ—Ä—å —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
      console.log(`[–¢–æ–∫–µ–Ω—ã: ${isContinuation ? '–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞' : '–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞'}] ${JSON.stringify(response.cacheStats)}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–µ–∑–∞–Ω –ª–∏ –æ—Ç–≤–µ—Ç
      const isTruncated = response.usage.outputTokens >= maxTokens * this.truncationThreshold;
      
      return {
        patient_response: response.content,
        token_usage: {
          input: response.usage.inputTokens,
          output: response.usage.outputTokens,
          total: response.usage.totalTokens,
          cache_creation: response.usage.cacheCreationTokens || 0,
          cache_read: response.usage.cacheReadTokens || 0
        },
        is_truncated: isTruncated,
        cache_stats: response.cacheStats
      };
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–∞:", error);
      throw error;
    }
  }
  
  /**
   * üìä –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  getCacheStats() {
    return this.cacheManager.getCacheStats();
  }

  /**
   * üìã –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  logCacheStats() {
    this.cacheManager.logCacheStats();
  }

  /**
   * –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å–ª—É—á–∞–µ–≤
   */
  listCategories() {
    console.log("\n=== –ö–ê–¢–ï–ì–û–†–ò–ò –ü–°–ò–•–û–õ–û–ì–ò–ß–ï–°–ö–ò–• –°–õ–£–ß–ê–ï–í ===");
    
    Object.entries(this.casesDB).forEach(([key, category], index) => {
      console.log(`${index + 1}. ${category.name} (${key})`);
      category.cases.forEach((caseItem, i) => {
        console.log(`   ${i+1}. ${caseItem}`);
      });
      console.log("");
    });
  }
  
  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –≤ —Ñ–∞–π–ª
   * @param {object} patientData - –î–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞
   * @returns {string} - –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
   */
  savePatientData(patientData) {
    // –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∏ —Ç–∏–ø–∞ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    const sanitizedName = patientData.name.toLowerCase().replace(/\s+/g, '_');
    const sanitizedDiagnosis = patientData.meta.diagnosis.toLowerCase()
                                .replace(/\s+/g, '_')
                                .replace(/[^\w-]/g, '');
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    
    const fileName = `${sanitizedName}_${sanitizedDiagnosis}_${timestamp}.json`;
    const filePath = `./patients/${fileName}`;
    
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!fs.existsSync('./patients')) {
      fs.mkdirSync('./patients');
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª
    fs.writeFileSync(filePath, JSON.stringify(patientData, null, 2));
    
    return filePath;
  }
  
  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞
   * @param {string} filePath - –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞
   * @returns {object} - –î–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞
   */
  loadPatientData(filePath) {
    try {
      const data = fs.readFileSync(filePath, 'utf8');
      return JSON.parse(data);
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∏–∑ ${filePath}:`, error);
      throw error;
    }
  }
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –∫–ª—é—á –∏–∑ –æ–±—ä–µ–∫—Ç–∞
   * @param {object} obj - –û–±—ä–µ–∫—Ç
   * @returns {string} - –°–ª—É—á–∞–π–Ω—ã–π –∫–ª—é—á
   */
  getRandomKey(obj) {
    const keys = Object.keys(obj);
    return keys[Math.floor(Math.random() * keys.length)];
  }
  
  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å–ª—É—á–∞—è
   * @param {number} complexity - –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (1-5)
   * @returns {string} - –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
   */
  getComplexityDescription(complexity) {
    const descriptions = {
      1: "—Ç–∏–ø–∏—á–Ω—ã–π –Ω–µ—Å–ª–æ–∂–Ω—ã–π —Å–ª—É—á–∞–π, —Ö–æ—Ä–æ—à–æ –ø–æ–¥–¥–∞—é—â–∏–π—Å—è —Ç–µ—Ä–∞–ø–∏–∏",
      2: "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ª—É—á–∞–π —Å—Ä–µ–¥–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏",
      3: "—Å–ª—É—á–∞–π —É–º–µ—Ä–µ–Ω–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å –Ω–µ–∫–æ—Ç–æ—Ä—ã–º–∏ –Ω–µ—Ç–∏–ø–∏—á–Ω—ã–º–∏ –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è–º–∏",
      4: "—Å–ª–æ–∂–Ω—ã–π —Å–ª—É—á–∞–π —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –∏–ª–∏ —Å–æ–ø—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏", 
      5: "–æ—Å–æ–±–æ —Å–ª–æ–∂–Ω—ã–π —Å–ª—É—á–∞–π, —Ç—Ä–µ–±—É—é—â–∏–π –æ–ø—ã—Ç–Ω–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –∏ –≤–æ–∑–º–æ–∂–Ω–æ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ –∫ –ª–µ—á–µ–Ω–∏—é"
    };
    
    return descriptions[complexity] || descriptions[3];
  }
}

// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function demonstrateSystem() {
  console.log("=== –°–ò–°–¢–ï–ú–ê –≠–ú–£–õ–Ø–¶–ò–ò –ü–ê–¶–ò–ï–ù–¢–û–í –î–õ–Ø –¢–†–ï–ù–ò–ù–ì–ê –ü–°–ò–•–û–õ–û–ì–û–í ===\n");
  
  const patientSystem = new PatientSystem();
  
  // –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏
  patientSystem.listCategories();
  
  // –ñ–¥–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
  console.log("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞...\n");
  
  try {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π
    const patientData = await patientSystem.generateCase({
      category: "anxiety", // –ú–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ª—é–±—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞
      openness: "neutral",  // open, neutral, closed
      complexity: 3         // 1-5
    });
    
    console.log(`\n=== –ö–ê–†–¢–û–ß–ö–ê –ü–ê–¶–ò–ï–ù–¢–ê: ${patientData.name}, ${patientData.age} –ª–µ—Ç ===`);
    console.log(`–î–∏–∞–≥–Ω–æ–∑: ${patientData.meta.diagnosis}`);
    console.log(`–ü—Ä–æ—Ñ–µ—Å—Å–∏—è: ${patientData.profession}`);
    console.log(`–ü—Ä–æ–±–ª–µ–º–∞: ${patientData.problem}`);
    console.log(`–û—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å: ${patientData.openness}`);
    console.log(`–°–ª–æ–∂–Ω–æ—Å—Ç—å: ${patientData.meta.complexity}/5`);
    console.log("\n–°–∏–º–ø—Ç–æ–º—ã:");
    patientData.symptoms.forEach(symptom => console.log(`- ${symptom}`));
    console.log("\n–¢—Ä–∏–≥–≥–µ—Ä—ã:");
    patientData.triggers.forEach(trigger => console.log(`- ${trigger}`));
    console.log("\n–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∑–∞—â–∏—Ç—ã:");
    patientData.defenses.forEach(defense => console.log(`- ${defense}`));
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞
    const savedPath = patientSystem.savePatientData(patientData);
    console.log(`\n–î–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${savedPath}`);
    
    // –ù–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–ª–æ–≥
    console.log("\n=== –ù–ê–ß–ê–õ–û –î–ò–ê–õ–û–ì–ê ===");
    const firstQuestion = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß—Ç–æ –ø—Ä–∏–≤–µ–ª–æ –≤–∞—Å –∫–æ –º–Ω–µ —Å–µ–≥–æ–¥–Ω—è?";
    console.log(`–ü—Å–∏—Ö–æ–ª–æ–≥: ${firstQuestion}`);
    
    const initialResponse = await patientSystem.startPatientDialog(patientData, firstQuestion);
    console.log(`–ü–∞—Ü–∏–µ–Ω—Ç: ${initialResponse.patient_response}`);
    console.log(`\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: ${initialResponse.token_usage.total}`);
    
    // –ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–∏–∞–ª–æ–≥
    console.log("\n=== –ü–†–û–î–û–õ–ñ–ï–ù–ò–ï –î–ò–ê–õ–û–ì–ê ===");
    const conversation = [
      { therapist: firstQuestion, patient: initialResponse.patient_response }
    ];
    
    const followUpQuestion = "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –∫–æ–≥–¥–∞ –≤—ã –≤–ø–µ—Ä–≤—ã–µ –∑–∞–º–µ—Ç–∏–ª–∏ —ç—Ç–∏ —Å–∏–º–ø—Ç–æ–º—ã?";
    console.log(`–ü—Å–∏—Ö–æ–ª–æ–≥: ${followUpQuestion}`);
    
    const followUpResponse = await patientSystem.continuePatientDialog(patientData, conversation, followUpQuestion);
    console.log(`–ü–∞—Ü–∏–µ–Ω—Ç: ${followUpResponse.patient_response}`);
    console.log(`\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: ${followUpResponse.token_usage.total}`);
    
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏:", error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é, –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  demonstrateSystem();
}

module.exports = PatientSystem;